//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiControlHost
{
    
    
    /// <summary>
    /// The InfraredControllerConfig Configuration Section.
    /// </summary>
    public partial class InfraredControllerConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the InfraredControllerConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string InfraredControllerConfigSectionName = "infraredControllerConfig";
        
        /// <summary>
        /// Gets the InfraredControllerConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::MultiControlHost.InfraredControllerConfig Instance
        {
            get
            {
                return ((global::MultiControlHost.InfraredControllerConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::MultiControlHost.InfraredControllerConfig.InfraredControllerConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.InfraredControllerConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::MultiControlHost.InfraredControllerConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.InfraredControllerConfig.EnabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Enabled
        {
            get
            {
                return ((bool)(base[global::MultiControlHost.InfraredControllerConfig.EnabledPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.InfraredControllerConfig.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region RemoteControllers Property
        /// <summary>
        /// The XML name of the <see cref="RemoteControllers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RemoteControllersPropertyName = "remoteControllers";
        
        /// <summary>
        /// Gets or sets the RemoteControllers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RemoteControllers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.InfraredControllerConfig.RemoteControllersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.RemoteControllers RemoteControllers
        {
            get
            {
                return ((global::MultiControlHost.RemoteControllers)(base[global::MultiControlHost.InfraredControllerConfig.RemoteControllersPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.InfraredControllerConfig.RemoteControllersPropertyName] = value;
            }
        }
        #endregion
        
        #region Options Property
        /// <summary>
        /// The XML name of the <see cref="Options"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OptionsPropertyName = "options";
        
        /// <summary>
        /// Gets or sets the Options.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Options.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.InfraredControllerConfig.OptionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.IRsettings Options
        {
            get
            {
                return ((global::MultiControlHost.IRsettings)(base[global::MultiControlHost.InfraredControllerConfig.OptionsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.InfraredControllerConfig.OptionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The ResistiveControllerConfig Configuration Section.
    /// </summary>
    public partial class ResistiveControllerConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ResistiveControllerConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ResistiveControllerConfigSectionName = "resistiveControllerConfig";
        
        /// <summary>
        /// Gets the ResistiveControllerConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::MultiControlHost.ResistiveControllerConfig Instance
        {
            get
            {
                return ((global::MultiControlHost.ResistiveControllerConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::MultiControlHost.ResistiveControllerConfig.ResistiveControllerConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ResistiveControllerConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::MultiControlHost.ResistiveControllerConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ResistiveControllerConfig.EnabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Enabled
        {
            get
            {
                return ((bool)(base[global::MultiControlHost.ResistiveControllerConfig.EnabledPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ResistiveControllerConfig.EnabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Buttons Property
        /// <summary>
        /// The XML name of the <see cref="Buttons"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ButtonsPropertyName = "buttons";
        
        /// <summary>
        /// Gets or sets the Buttons.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Buttons.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ResistiveControllerConfig.ButtonsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.Buttons Buttons
        {
            get
            {
                return ((global::MultiControlHost.Buttons)(base[global::MultiControlHost.ResistiveControllerConfig.ButtonsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ResistiveControllerConfig.ButtonsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// A collection of Button instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MultiControlHost.Button), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MultiControlHost.Buttons.ButtonPropertyName)]
    public partial class Buttons : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MultiControlHost.Button"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ButtonPropertyName = "button";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::MultiControlHost.Buttons.ButtonPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MultiControlHost.Buttons.ButtonPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MultiControlHost.Button)(element)).id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MultiControlHost.Button"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MultiControlHost.Button"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MultiControlHost.Button();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Button"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.Button"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Button this[int index]
        {
            get
            {
                return ((global::MultiControlHost.Button)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Button"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::MultiControlHost.Button"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Button this[object id]
        {
            get
            {
                return ((global::MultiControlHost.Button)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MultiControlHost.Button"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="button">The <see cref="global::MultiControlHost.Button"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::MultiControlHost.Button button)
        {
            base.BaseAdd(button);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MultiControlHost.Button"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="button">The <see cref="global::MultiControlHost.Button"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::MultiControlHost.Button button)
        {
            base.BaseRemove(this.GetElementKey(button));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Button"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.Button"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Button GetItemAt(int index)
        {
            return ((global::MultiControlHost.Button)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Button"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::MultiControlHost.Button"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Button GetItemByKey(int id)
        {
            return ((global::MultiControlHost.Button)(base.BaseGet(((object)(id)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// A collection of RemoteController instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MultiControlHost.RemoteController), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MultiControlHost.RemoteControllers.RemoteControllerPropertyName)]
    public partial class RemoteControllers : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MultiControlHost.RemoteController"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RemoteControllerPropertyName = "remoteController";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::MultiControlHost.RemoteControllers.RemoteControllerPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MultiControlHost.RemoteControllers.RemoteControllerPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MultiControlHost.RemoteController)(element)).name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MultiControlHost.RemoteController"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MultiControlHost.RemoteController"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MultiControlHost.RemoteController();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.RemoteController"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.RemoteController"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.RemoteController this[int index]
        {
            get
            {
                return ((global::MultiControlHost.RemoteController)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.RemoteController"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::MultiControlHost.RemoteController"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.RemoteController this[object name]
        {
            get
            {
                return ((global::MultiControlHost.RemoteController)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MultiControlHost.RemoteController"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="remoteController">The <see cref="global::MultiControlHost.RemoteController"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::MultiControlHost.RemoteController remoteController)
        {
            base.BaseAdd(remoteController);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MultiControlHost.RemoteController"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="remoteController">The <see cref="global::MultiControlHost.RemoteController"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::MultiControlHost.RemoteController remoteController)
        {
            base.BaseRemove(this.GetElementKey(remoteController));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.RemoteController"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.RemoteController"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.RemoteController GetItemAt(int index)
        {
            return ((global::MultiControlHost.RemoteController)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.RemoteController"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::MultiControlHost.RemoteController"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.RemoteController GetItemByKey(string name)
        {
            return ((global::MultiControlHost.RemoteController)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The RemoteController Configuration Element.
    /// </summary>
    public partial class RemoteController : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region name Property
        /// <summary>
        /// The XML name of the <see cref="name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string namePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RemoteController.namePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string name
        {
            get
            {
                return ((string)(base[global::MultiControlHost.RemoteController.namePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RemoteController.namePropertyName] = value;
            }
        }
        #endregion
        
        #region encode_algorithm Property
        /// <summary>
        /// The XML name of the <see cref="encode_algorithm"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string encode_algorithmPropertyName = "encode_algorithm";
        
        /// <summary>
        /// Gets or sets the encode_algorithm.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The encode_algorithm.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RemoteController.encode_algorithmPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string encode_algorithm
        {
            get
            {
                return ((string)(base[global::MultiControlHost.RemoteController.encode_algorithmPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RemoteController.encode_algorithmPropertyName] = value;
            }
        }
        #endregion
        
        #region Buttons Property
        /// <summary>
        /// The XML name of the <see cref="Buttons"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ButtonsPropertyName = "buttons";
        
        /// <summary>
        /// Gets or sets the Buttons.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Buttons.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RemoteController.ButtonsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.Buttons Buttons
        {
            get
            {
                return ((global::MultiControlHost.Buttons)(base[global::MultiControlHost.RemoteController.ButtonsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RemoteController.ButtonsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The Button Configuration Element.
    /// </summary>
    public partial class Button : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region id Property
        /// <summary>
        /// The XML name of the <see cref="id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string idPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Button.idPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual int id
        {
            get
            {
                return ((int)(base[global::MultiControlHost.Button.idPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Button.idPropertyName] = value;
            }
        }
        #endregion
        
        #region name Property
        /// <summary>
        /// The XML name of the <see cref="name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string namePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Button.namePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string name
        {
            get
            {
                return ((string)(base[global::MultiControlHost.Button.namePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Button.namePropertyName] = value;
            }
        }
        #endregion
        
        #region code Property
        /// <summary>
        /// The XML name of the <see cref="code"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string codePropertyName = "code";
        
        /// <summary>
        /// Gets or sets the code.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The code.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Button.codePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string code
        {
            get
            {
                return ((string)(base[global::MultiControlHost.Button.codePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Button.codePropertyName] = value;
            }
        }
        #endregion
        
        #region action Property
        /// <summary>
        /// The XML name of the <see cref="action"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string actionPropertyName = "action";
        
        /// <summary>
        /// Gets or sets the action.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The action.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Button.actionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int action
        {
            get
            {
                return ((int)(base[global::MultiControlHost.Button.actionPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Button.actionPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The GeneralDeviceConfig Configuration Section.
    /// </summary>
    public partial class GeneralDeviceConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the GeneralDeviceConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string GeneralDeviceConfigSectionName = "generalDeviceConfig";
        
        /// <summary>
        /// Gets the GeneralDeviceConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::MultiControlHost.GeneralDeviceConfig Instance
        {
            get
            {
                return ((global::MultiControlHost.GeneralDeviceConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::MultiControlHost.GeneralDeviceConfig.GeneralDeviceConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.GeneralDeviceConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::MultiControlHost.GeneralDeviceConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Connection Property
        /// <summary>
        /// The XML name of the <see cref="Connection"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectionPropertyName = "connection";
        
        /// <summary>
        /// Gets or sets the Connection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Connection.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.GeneralDeviceConfig.ConnectionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.Connection Connection
        {
            get
            {
                return ((global::MultiControlHost.Connection)(base[global::MultiControlHost.GeneralDeviceConfig.ConnectionPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.GeneralDeviceConfig.ConnectionPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The Connection Configuration Element.
    /// </summary>
    public partial class Connection : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region PortNumber Property
        /// <summary>
        /// The XML name of the <see cref="PortNumber"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortNumberPropertyName = "PortNumber";
        
        /// <summary>
        /// Gets or sets the PortNumber.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PortNumber.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Connection.PortNumberPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue PortNumber
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Connection.PortNumberPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Connection.PortNumberPropertyName] = value;
            }
        }
        #endregion
        
        #region BaudRate Property
        /// <summary>
        /// The XML name of the <see cref="BaudRate"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string BaudRatePropertyName = "BaudRate";
        
        /// <summary>
        /// Gets or sets the BaudRate.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The BaudRate.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Connection.BaudRatePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue BaudRate
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Connection.BaudRatePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Connection.BaudRatePropertyName] = value;
            }
        }
        #endregion
        
        #region Parity Property
        /// <summary>
        /// The XML name of the <see cref="Parity"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ParityPropertyName = "Parity";
        
        /// <summary>
        /// Gets or sets the Parity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Parity.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Connection.ParityPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue Parity
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Connection.ParityPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Connection.ParityPropertyName] = value;
            }
        }
        #endregion
        
        #region StopBits Property
        /// <summary>
        /// The XML name of the <see cref="StopBits"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StopBitsPropertyName = "StopBits";
        
        /// <summary>
        /// Gets or sets the StopBits.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The StopBits.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Connection.StopBitsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue StopBits
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Connection.StopBitsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Connection.StopBitsPropertyName] = value;
            }
        }
        #endregion
        
        #region DataBits Property
        /// <summary>
        /// The XML name of the <see cref="DataBits"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DataBitsPropertyName = "DataBits";
        
        /// <summary>
        /// Gets or sets the DataBits.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DataBits.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Connection.DataBitsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue DataBits
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Connection.DataBitsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Connection.DataBitsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The SingleValue Configuration Element.
    /// </summary>
    public partial class SingleValue : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region value Property
        /// <summary>
        /// The XML name of the <see cref="value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string valuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.SingleValue.valuePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string value
        {
            get
            {
                return ((string)(base[global::MultiControlHost.SingleValue.valuePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.SingleValue.valuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The IRsettings Configuration Element.
    /// </summary>
    public partial class IRsettings : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region CurrentRemoteController Property
        /// <summary>
        /// The XML name of the <see cref="CurrentRemoteController"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CurrentRemoteControllerPropertyName = "CurrentRemoteController";
        
        /// <summary>
        /// Gets or sets the CurrentRemoteController.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CurrentRemoteController.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.IRsettings.CurrentRemoteControllerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue CurrentRemoteController
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.IRsettings.CurrentRemoteControllerPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.IRsettings.CurrentRemoteControllerPropertyName] = value;
            }
        }
        #endregion
        
        #region AllowLongPress Property
        /// <summary>
        /// The XML name of the <see cref="AllowLongPress"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AllowLongPressPropertyName = "AllowLongPress";
        
        /// <summary>
        /// Gets or sets the AllowLongPress.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AllowLongPress.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.IRsettings.AllowLongPressPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue AllowLongPress
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.IRsettings.AllowLongPressPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.IRsettings.AllowLongPressPropertyName] = value;
            }
        }
        #endregion
        
        #region Enabled Property
        /// <summary>
        /// The XML name of the <see cref="Enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnabledPropertyName = "Enabled";
        
        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.IRsettings.EnabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue Enabled
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.IRsettings.EnabledPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.IRsettings.EnabledPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The ActionsConfig Configuration Section.
    /// </summary>
    public partial class ActionsConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ActionsConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ActionsConfigSectionName = "actionsConfig";
        
        /// <summary>
        /// Gets the ActionsConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::MultiControlHost.ActionsConfig Instance
        {
            get
            {
                return ((global::MultiControlHost.ActionsConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::MultiControlHost.ActionsConfig.ActionsConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ActionsConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::MultiControlHost.ActionsConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Actions Property
        /// <summary>
        /// The XML name of the <see cref="Actions"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ActionsPropertyName = "Actions";
        
        /// <summary>
        /// Gets or sets the Actions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Actions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ActionsConfig.ActionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.ActionsDescriptors Actions
        {
            get
            {
                return ((global::MultiControlHost.ActionsDescriptors)(base[global::MultiControlHost.ActionsConfig.ActionsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ActionsConfig.ActionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// A collection of ActionDescriptor instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MultiControlHost.ActionDescriptor), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MultiControlHost.ActionsDescriptors.ActionDescriptorPropertyName)]
    public partial class ActionsDescriptors : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MultiControlHost.ActionDescriptor"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ActionDescriptorPropertyName = "ActionDescriptor";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::MultiControlHost.ActionsDescriptors.ActionDescriptorPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MultiControlHost.ActionsDescriptors.ActionDescriptorPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MultiControlHost.ActionDescriptor)(element)).id;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MultiControlHost.ActionDescriptor"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MultiControlHost.ActionDescriptor"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MultiControlHost.ActionDescriptor();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ActionDescriptor"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.ActionDescriptor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ActionDescriptor this[int index]
        {
            get
            {
                return ((global::MultiControlHost.ActionDescriptor)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ActionDescriptor"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::MultiControlHost.ActionDescriptor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ActionDescriptor this[object id]
        {
            get
            {
                return ((global::MultiControlHost.ActionDescriptor)(base.BaseGet(id)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MultiControlHost.ActionDescriptor"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="ActionDescriptor">The <see cref="global::MultiControlHost.ActionDescriptor"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::MultiControlHost.ActionDescriptor ActionDescriptor)
        {
            base.BaseAdd(ActionDescriptor);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MultiControlHost.ActionDescriptor"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="ActionDescriptor">The <see cref="global::MultiControlHost.ActionDescriptor"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::MultiControlHost.ActionDescriptor ActionDescriptor)
        {
            base.BaseRemove(this.GetElementKey(ActionDescriptor));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ActionDescriptor"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.ActionDescriptor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ActionDescriptor GetItemAt(int index)
        {
            return ((global::MultiControlHost.ActionDescriptor)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ActionDescriptor"/> with the specified key.
        /// </summary>
        /// <param name="id">The key of the <see cref="global::MultiControlHost.ActionDescriptor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ActionDescriptor GetItemByKey(int id)
        {
            return ((global::MultiControlHost.ActionDescriptor)(base.BaseGet(((object)(id)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The ActionDescriptor Configuration Element.
    /// </summary>
    public partial class ActionDescriptor : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region id Property
        /// <summary>
        /// The XML name of the <see cref="id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string idPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ActionDescriptor.idPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual int id
        {
            get
            {
                return ((int)(base[global::MultiControlHost.ActionDescriptor.idPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ActionDescriptor.idPropertyName] = value;
            }
        }
        #endregion
        
        #region name Property
        /// <summary>
        /// The XML name of the <see cref="name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string namePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ActionDescriptor.namePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string name
        {
            get
            {
                return ((string)(base[global::MultiControlHost.ActionDescriptor.namePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ActionDescriptor.namePropertyName] = value;
            }
        }
        #endregion
        
        #region type Property
        /// <summary>
        /// The XML name of the <see cref="type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string typePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ActionDescriptor.typePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int type
        {
            get
            {
                return ((int)(base[global::MultiControlHost.ActionDescriptor.typePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ActionDescriptor.typePropertyName] = value;
            }
        }
        #endregion
        
        #region value Property
        /// <summary>
        /// The XML name of the <see cref="value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string valuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ActionDescriptor.valuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string value
        {
            get
            {
                return ((string)(base[global::MultiControlHost.ActionDescriptor.valuePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ActionDescriptor.valuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The TemperatureSensorsConfig Configuration Section.
    /// </summary>
    public partial class TemperatureSensorsConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the TemperatureSensorsConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TemperatureSensorsConfigSectionName = "temperatureSensorsConfig";
        
        /// <summary>
        /// Gets the TemperatureSensorsConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::MultiControlHost.TemperatureSensorsConfig Instance
        {
            get
            {
                return ((global::MultiControlHost.TemperatureSensorsConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::MultiControlHost.TemperatureSensorsConfig.TemperatureSensorsConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.TemperatureSensorsConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::MultiControlHost.TemperatureSensorsConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Sensors Property
        /// <summary>
        /// The XML name of the <see cref="Sensors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SensorsPropertyName = "sensors";
        
        /// <summary>
        /// Gets or sets the Sensors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Sensors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.TemperatureSensorsConfig.SensorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.Sensors Sensors
        {
            get
            {
                return ((global::MultiControlHost.Sensors)(base[global::MultiControlHost.TemperatureSensorsConfig.SensorsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.TemperatureSensorsConfig.SensorsPropertyName] = value;
            }
        }
        #endregion
        
        #region Options Property
        /// <summary>
        /// The XML name of the <see cref="Options"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OptionsPropertyName = "options";
        
        /// <summary>
        /// Gets or sets the Options.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Options.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.TemperatureSensorsConfig.OptionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.Options Options
        {
            get
            {
                return ((global::MultiControlHost.Options)(base[global::MultiControlHost.TemperatureSensorsConfig.OptionsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.TemperatureSensorsConfig.OptionsPropertyName] = value;
            }
        }
        #endregion
        
        #region Widgets Property
        /// <summary>
        /// The XML name of the <see cref="Widgets"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string WidgetsPropertyName = "widgets";
        
        /// <summary>
        /// Gets or sets the Widgets.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Widgets.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.TemperatureSensorsConfig.WidgetsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.Widgets Widgets
        {
            get
            {
                return ((global::MultiControlHost.Widgets)(base[global::MultiControlHost.TemperatureSensorsConfig.WidgetsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.TemperatureSensorsConfig.WidgetsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// A collection of Sensor instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MultiControlHost.Sensor), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MultiControlHost.Sensors.SensorPropertyName)]
    public partial class Sensors : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MultiControlHost.Sensor"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SensorPropertyName = "sensor";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::MultiControlHost.Sensors.SensorPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MultiControlHost.Sensors.SensorPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MultiControlHost.Sensor)(element)).ROM;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MultiControlHost.Sensor"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MultiControlHost.Sensor"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MultiControlHost.Sensor();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Sensor"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.Sensor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Sensor this[int index]
        {
            get
            {
                return ((global::MultiControlHost.Sensor)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Sensor"/> with the specified key.
        /// </summary>
        /// <param name="ROM">The key of the <see cref="global::MultiControlHost.Sensor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Sensor this[object ROM]
        {
            get
            {
                return ((global::MultiControlHost.Sensor)(base.BaseGet(ROM)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MultiControlHost.Sensor"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="sensor">The <see cref="global::MultiControlHost.Sensor"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::MultiControlHost.Sensor sensor)
        {
            base.BaseAdd(sensor);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MultiControlHost.Sensor"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="sensor">The <see cref="global::MultiControlHost.Sensor"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::MultiControlHost.Sensor sensor)
        {
            base.BaseRemove(this.GetElementKey(sensor));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Sensor"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.Sensor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Sensor GetItemAt(int index)
        {
            return ((global::MultiControlHost.Sensor)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Sensor"/> with the specified key.
        /// </summary>
        /// <param name="ROM">The key of the <see cref="global::MultiControlHost.Sensor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Sensor GetItemByKey(string ROM)
        {
            return ((global::MultiControlHost.Sensor)(base.BaseGet(((object)(ROM)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The Options Configuration Element.
    /// </summary>
    public partial class Options : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ROMsize Property
        /// <summary>
        /// The XML name of the <see cref="ROMsize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ROMsizePropertyName = "ROMsize";
        
        /// <summary>
        /// Gets or sets the ROMsize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ROMsize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Options.ROMsizePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue ROMsize
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Options.ROMsizePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Options.ROMsizePropertyName] = value;
            }
        }
        #endregion
        
        #region askInterval Property
        /// <summary>
        /// The XML name of the <see cref="askInterval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string askIntervalPropertyName = "askInterval";
        
        /// <summary>
        /// Gets or sets the askInterval.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The askInterval.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Options.askIntervalPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue askInterval
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Options.askIntervalPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Options.askIntervalPropertyName] = value;
            }
        }
        #endregion
        
        #region saveInterval Property
        /// <summary>
        /// The XML name of the <see cref="saveInterval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string saveIntervalPropertyName = "saveInterval";
        
        /// <summary>
        /// Gets or sets the saveInterval.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The saveInterval.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Options.saveIntervalPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue saveInterval
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Options.saveIntervalPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Options.saveIntervalPropertyName] = value;
            }
        }
        #endregion
        
        #region maxDevices Property
        /// <summary>
        /// The XML name of the <see cref="maxDevices"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string maxDevicesPropertyName = "maxDevices";
        
        /// <summary>
        /// Gets or sets the maxDevices.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The maxDevices.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Options.maxDevicesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue maxDevices
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Options.maxDevicesPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Options.maxDevicesPropertyName] = value;
            }
        }
        #endregion
        
        #region TempTableVisibleValuesNumber Property
        /// <summary>
        /// The XML name of the <see cref="TempTableVisibleValuesNumber"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TempTableVisibleValuesNumberPropertyName = "tempTableVisibleValuesNumber";
        
        /// <summary>
        /// Gets or sets the TempTableVisibleValuesNumber.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TempTableVisibleValuesNumber.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Options.TempTableVisibleValuesNumberPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue TempTableVisibleValuesNumber
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.Options.TempTableVisibleValuesNumberPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Options.TempTableVisibleValuesNumberPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The Sensor Configuration Element.
    /// </summary>
    public partial class Sensor : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ROM Property
        /// <summary>
        /// The XML name of the <see cref="ROM"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ROMPropertyName = "ROM";
        
        /// <summary>
        /// Gets or sets the ROM.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ROM.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Sensor.ROMPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string ROM
        {
            get
            {
                return ((string)(base[global::MultiControlHost.Sensor.ROMPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Sensor.ROMPropertyName] = value;
            }
        }
        #endregion
        
        #region name Property
        /// <summary>
        /// The XML name of the <see cref="name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string namePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Sensor.namePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string name
        {
            get
            {
                return ((string)(base[global::MultiControlHost.Sensor.namePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Sensor.namePropertyName] = value;
            }
        }
        #endregion
        
        #region askInterval Property
        /// <summary>
        /// The XML name of the <see cref="askInterval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string askIntervalPropertyName = "askInterval";
        
        /// <summary>
        /// Gets or sets the askInterval.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The askInterval.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Sensor.askIntervalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int askInterval
        {
            get
            {
                return ((int)(base[global::MultiControlHost.Sensor.askIntervalPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Sensor.askIntervalPropertyName] = value;
            }
        }
        #endregion
        
        #region dbSave Property
        /// <summary>
        /// The XML name of the <see cref="dbSave"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string dbSavePropertyName = "dbSave";
        
        /// <summary>
        /// Gets or sets the dbSave.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The dbSave.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Sensor.dbSavePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool dbSave
        {
            get
            {
                return ((bool)(base[global::MultiControlHost.Sensor.dbSavePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Sensor.dbSavePropertyName] = value;
            }
        }
        #endregion
        
        #region saveInterval Property
        /// <summary>
        /// The XML name of the <see cref="saveInterval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string saveIntervalPropertyName = "saveInterval";
        
        /// <summary>
        /// Gets or sets the saveInterval.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The saveInterval.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Sensor.saveIntervalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int saveInterval
        {
            get
            {
                return ((int)(base[global::MultiControlHost.Sensor.saveIntervalPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Sensor.saveIntervalPropertyName] = value;
            }
        }
        #endregion
        
        #region drawOnGraph Property
        /// <summary>
        /// The XML name of the <see cref="drawOnGraph"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string drawOnGraphPropertyName = "drawOnGraph";
        
        /// <summary>
        /// Gets or sets the drawOnGraph.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The drawOnGraph.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Sensor.drawOnGraphPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool drawOnGraph
        {
            get
            {
                return ((bool)(base[global::MultiControlHost.Sensor.drawOnGraphPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Sensor.drawOnGraphPropertyName] = value;
            }
        }
        #endregion
        
        #region id Property
        /// <summary>
        /// The XML name of the <see cref="id"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string idPropertyName = "id";
        
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The id.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Sensor.idPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int id
        {
            get
            {
                return ((int)(base[global::MultiControlHost.Sensor.idPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Sensor.idPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// A collection of Widget instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MultiControlHost.Widget), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MultiControlHost.Widgets.WidgetPropertyName)]
    public partial class Widgets : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MultiControlHost.Widget"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string WidgetPropertyName = "widget";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::MultiControlHost.Widgets.WidgetPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MultiControlHost.Widgets.WidgetPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MultiControlHost.Widget)(element)).widgetName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MultiControlHost.Widget"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MultiControlHost.Widget"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MultiControlHost.Widget();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Widget"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.Widget"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Widget this[int index]
        {
            get
            {
                return ((global::MultiControlHost.Widget)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Widget"/> with the specified key.
        /// </summary>
        /// <param name="widgetName">The key of the <see cref="global::MultiControlHost.Widget"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Widget this[object widgetName]
        {
            get
            {
                return ((global::MultiControlHost.Widget)(base.BaseGet(widgetName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MultiControlHost.Widget"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="widget">The <see cref="global::MultiControlHost.Widget"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::MultiControlHost.Widget widget)
        {
            base.BaseAdd(widget);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MultiControlHost.Widget"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="widget">The <see cref="global::MultiControlHost.Widget"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::MultiControlHost.Widget widget)
        {
            base.BaseRemove(this.GetElementKey(widget));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Widget"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.Widget"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Widget GetItemAt(int index)
        {
            return ((global::MultiControlHost.Widget)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.Widget"/> with the specified key.
        /// </summary>
        /// <param name="widgetName">The key of the <see cref="global::MultiControlHost.Widget"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.Widget GetItemByKey(string widgetName)
        {
            return ((global::MultiControlHost.Widget)(base.BaseGet(((object)(widgetName)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The Widget Configuration Element.
    /// </summary>
    public partial class Widget : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region sensorROM Property
        /// <summary>
        /// The XML name of the <see cref="sensorROM"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string sensorROMPropertyName = "sensorROM";
        
        /// <summary>
        /// Gets or sets the sensorROM.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The sensorROM.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Widget.sensorROMPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string sensorROM
        {
            get
            {
                return ((string)(base[global::MultiControlHost.Widget.sensorROMPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Widget.sensorROMPropertyName] = value;
            }
        }
        #endregion
        
        #region widgetName Property
        /// <summary>
        /// The XML name of the <see cref="widgetName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string widgetNamePropertyName = "widgetName";
        
        /// <summary>
        /// Gets or sets the widgetName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The widgetName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.Widget.widgetNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string widgetName
        {
            get
            {
                return ((string)(base[global::MultiControlHost.Widget.widgetNamePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.Widget.widgetNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The RGBControllerConfig Configuration Section.
    /// </summary>
    public partial class RGBControllerConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the RGBControllerConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RGBControllerConfigSectionName = "RGBControllerConfig";
        
        /// <summary>
        /// Gets the RGBControllerConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::MultiControlHost.RGBControllerConfig Instance
        {
            get
            {
                return ((global::MultiControlHost.RGBControllerConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::MultiControlHost.RGBControllerConfig.RGBControllerConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RGBControllerConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::MultiControlHost.RGBControllerConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region enabled Property
        /// <summary>
        /// The XML name of the <see cref="enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string enabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RGBControllerConfig.enabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool enabled
        {
            get
            {
                return ((bool)(base[global::MultiControlHost.RGBControllerConfig.enabledPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RGBControllerConfig.enabledPropertyName] = value;
            }
        }
        #endregion
        
        #region Options Property
        /// <summary>
        /// The XML name of the <see cref="Options"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string OptionsPropertyName = "options";
        
        /// <summary>
        /// Gets or sets the Options.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Options.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RGBControllerConfig.OptionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.RGBOptions Options
        {
            get
            {
                return ((global::MultiControlHost.RGBOptions)(base[global::MultiControlHost.RGBControllerConfig.OptionsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RGBControllerConfig.OptionsPropertyName] = value;
            }
        }
        #endregion
        
        #region ColorPresets Property
        /// <summary>
        /// The XML name of the <see cref="ColorPresets"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ColorPresetsPropertyName = "colorPresets";
        
        /// <summary>
        /// Gets or sets the ColorPresets.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ColorPresets.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RGBControllerConfig.ColorPresetsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.ColorPresets ColorPresets
        {
            get
            {
                return ((global::MultiControlHost.ColorPresets)(base[global::MultiControlHost.RGBControllerConfig.ColorPresetsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RGBControllerConfig.ColorPresetsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The RGBOptions Configuration Element.
    /// </summary>
    public partial class RGBOptions : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region mode Property
        /// <summary>
        /// The XML name of the <see cref="mode"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string modePropertyName = "mode";
        
        /// <summary>
        /// Gets or sets the mode.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The mode.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RGBOptions.modePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue mode
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.RGBOptions.modePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RGBOptions.modePropertyName] = value;
            }
        }
        #endregion
        
        #region defaultColor Property
        /// <summary>
        /// The XML name of the <see cref="defaultColor"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string defaultColorPropertyName = "defaultColor";
        
        /// <summary>
        /// Gets or sets the defaultColor.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The defaultColor.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RGBOptions.defaultColorPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue defaultColor
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.RGBOptions.defaultColorPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RGBOptions.defaultColorPropertyName] = value;
            }
        }
        #endregion
        
        #region colorPreset Property
        /// <summary>
        /// The XML name of the <see cref="colorPreset"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string colorPresetPropertyName = "colorPreset";
        
        /// <summary>
        /// Gets or sets the colorPreset.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The colorPreset.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.RGBOptions.colorPresetPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.SingleValue colorPreset
        {
            get
            {
                return ((global::MultiControlHost.SingleValue)(base[global::MultiControlHost.RGBOptions.colorPresetPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.RGBOptions.colorPresetPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// A collection of ColorPreset instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MultiControlHost.ColorPreset), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MultiControlHost.ColorPresets.ColorPresetPropertyName)]
    public partial class ColorPresets : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MultiControlHost.ColorPreset"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ColorPresetPropertyName = "colorPreset";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::MultiControlHost.ColorPresets.ColorPresetPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MultiControlHost.ColorPresets.ColorPresetPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MultiControlHost.ColorPreset)(element)).name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MultiControlHost.ColorPreset"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MultiControlHost.ColorPreset"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MultiControlHost.ColorPreset();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ColorPreset"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.ColorPreset"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ColorPreset this[int index]
        {
            get
            {
                return ((global::MultiControlHost.ColorPreset)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ColorPreset"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::MultiControlHost.ColorPreset"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ColorPreset this[object name]
        {
            get
            {
                return ((global::MultiControlHost.ColorPreset)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MultiControlHost.ColorPreset"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="colorPreset">The <see cref="global::MultiControlHost.ColorPreset"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::MultiControlHost.ColorPreset colorPreset)
        {
            base.BaseAdd(colorPreset);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MultiControlHost.ColorPreset"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="colorPreset">The <see cref="global::MultiControlHost.ColorPreset"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::MultiControlHost.ColorPreset colorPreset)
        {
            base.BaseRemove(this.GetElementKey(colorPreset));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ColorPreset"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.ColorPreset"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ColorPreset GetItemAt(int index)
        {
            return ((global::MultiControlHost.ColorPreset)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ColorPreset"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::MultiControlHost.ColorPreset"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ColorPreset GetItemByKey(string name)
        {
            return ((global::MultiControlHost.ColorPreset)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The ColorPreset Configuration Element.
    /// </summary>
    public partial class ColorPreset : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region name Property
        /// <summary>
        /// The XML name of the <see cref="name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string namePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ColorPreset.namePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string name
        {
            get
            {
                return ((string)(base[global::MultiControlHost.ColorPreset.namePropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ColorPreset.namePropertyName] = value;
            }
        }
        #endregion
        
        #region Transitions Property
        /// <summary>
        /// The XML name of the <see cref="Transitions"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TransitionsPropertyName = "transitions";
        
        /// <summary>
        /// Gets or sets the Transitions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Transitions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ColorPreset.TransitionsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::MultiControlHost.Transitions Transitions
        {
            get
            {
                return ((global::MultiControlHost.Transitions)(base[global::MultiControlHost.ColorPreset.TransitionsPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ColorPreset.TransitionsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// A collection of ColorPoint instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::MultiControlHost.ColorPoint), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::MultiControlHost.Transitions.ColorPointPropertyName)]
    public partial class Transitions : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::MultiControlHost.ColorPoint"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ColorPointPropertyName = "colorPoint";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::MultiControlHost.Transitions.ColorPointPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::MultiControlHost.Transitions.ColorPointPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::MultiControlHost.ColorPoint)(element)).index;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::MultiControlHost.ColorPoint"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::MultiControlHost.ColorPoint"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::MultiControlHost.ColorPoint();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ColorPoint"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.ColorPoint"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ColorPoint this[int index]
        {
            get
            {
                return ((global::MultiControlHost.ColorPoint)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ColorPoint"/> with the specified key.
        /// </summary>
        /// <param name="index">The key of the <see cref="global::MultiControlHost.ColorPoint"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ColorPoint this[object index]
        {
            get
            {
                return ((global::MultiControlHost.ColorPoint)(base.BaseGet(index)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::MultiControlHost.ColorPoint"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="colorPoint">The <see cref="global::MultiControlHost.ColorPoint"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::MultiControlHost.ColorPoint colorPoint)
        {
            base.BaseAdd(colorPoint);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::MultiControlHost.ColorPoint"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="colorPoint">The <see cref="global::MultiControlHost.ColorPoint"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::MultiControlHost.ColorPoint colorPoint)
        {
            base.BaseRemove(this.GetElementKey(colorPoint));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ColorPoint"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::MultiControlHost.ColorPoint"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ColorPoint GetItemAt(int index)
        {
            return ((global::MultiControlHost.ColorPoint)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::MultiControlHost.ColorPoint"/> with the specified key.
        /// </summary>
        /// <param name="index">The key of the <see cref="global::MultiControlHost.ColorPoint"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::MultiControlHost.ColorPoint GetItemByKey(int index)
        {
            return ((global::MultiControlHost.ColorPoint)(base.BaseGet(((object)(index)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace MultiControlHost
{
    
    
    /// <summary>
    /// The ColorPoint Configuration Element.
    /// </summary>
    public partial class ColorPoint : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region index Property
        /// <summary>
        /// The XML name of the <see cref="index"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string indexPropertyName = "index";
        
        /// <summary>
        /// Gets or sets the index.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The index.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ColorPoint.indexPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual int index
        {
            get
            {
                return ((int)(base[global::MultiControlHost.ColorPoint.indexPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ColorPoint.indexPropertyName] = value;
            }
        }
        #endregion
        
        #region color Property
        /// <summary>
        /// The XML name of the <see cref="color"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string colorPropertyName = "color";
        
        /// <summary>
        /// Gets or sets the color.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The color.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ColorPoint.colorPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string color
        {
            get
            {
                return ((string)(base[global::MultiControlHost.ColorPoint.colorPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ColorPoint.colorPropertyName] = value;
            }
        }
        #endregion
        
        #region duration Property
        /// <summary>
        /// The XML name of the <see cref="duration"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string durationPropertyName = "duration";
        
        /// <summary>
        /// Gets or sets the duration.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The duration.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::MultiControlHost.ColorPoint.durationPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int duration
        {
            get
            {
                return ((int)(base[global::MultiControlHost.ColorPoint.durationPropertyName]));
            }
            set
            {
                base[global::MultiControlHost.ColorPoint.durationPropertyName] = value;
            }
        }
        #endregion
    }
}
